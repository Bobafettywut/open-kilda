@startuml
title FLOW ping(verification) topology

control kilda.stats
control kilda.flow.status

participant Time
participant FlowFetcher
participant Neo4j

participant PingProducer
participant PingRouter
participant Blacklist
participant TimeoutManager
participant ResultDispatcher
participant PeriodicResultManager
participant StatsCoupler
participant StatsProducer
participant FailReporter
participant SpeakerEncoder
participant SpeakerDecoder

control kilda.speaker
control kilda.ping

participant FL

control SW.source
control SW.dest

note right of FlowFetcher: must be 1\nin system

Time -> FlowFetcher: ping tick
activate FlowFetcher
FlowFetcher -> Neo4j: fetch all flow
activate Neo4j
Neo4j -> FlowFetcher: [flows]
deactivate Neo4j

note right of FlowFetcher: for each flow
FlowFetcher -> PingProducer: PingContext\n(field grouping)
deactivate FlowFetcher

activate PingProducer
note right of PingProducer: make ping request\n(source+dest)
PingProducer -> PingRouter: PingContext
deactivate PingProducer
activate PingRouter
PingRouter -> Blacklist: PingContext\n(field grouping)
deactivate PingRouter

activate Blacklist
alt blacklisted
Blacklist ->x Blacklist: drop request
else normal workflow
Blacklist -> PingRouter: PingContext
activate PingRouter
end
deactivate Blacklist

PingRouter -> TimeoutManager: PingContext\n(field grouping)
deactivate PingRouter

activate TimeoutManager
note right of TimeoutManager: scheduleTimeout for\npingId
TimeoutManager -> SpeakerEncoder: PingRequest

activate SpeakerEncoder
SpeakerEncoder -> kilda.speaker: json{PingRequest}
deactivate SpeakerEncoder

kilda.speaker -> FL: json{PingRequest}
activate FL
note right of FL: make PingPackage
FL -> SW.source: PingPackage
deactivate FL

alt normal workflow
    SW.source -> SW.dest: PingPackage
    activate FL
    alt normal workflow
        SW.dest -> FL: PingPackage
        note right of FL: measure flow\nlatency
    else lack of capabilities
        note right of FL: Sw.dest is not\ncapable to catch ping
    end

    note right of FL: make PingResponse
    FL -> kilda.ping: json{PingResponse}
    deactivate FL

    kilda.ping -> SpeakerDecoder: json{PingResponse}

    activate SpeakerDecoder
    SpeakerDecoder -> PingRouter: PingResponse
    deactivate SpeakerDecoder

    PingRouter -> TimeoutManager: PingResponse\n(field grouping)
    note right of TimeoutManager: cancel timeout

    TimeoutManager -> ResultDispatcher: PingContext
    activate ResultDispatcher
    ResultDispatcher -> PeriodicResultManager: PingContext
    deactivate ResultDispatcher
    activate PeriodicResultManager
    alt get permanent error
        PeriodicResultManager -> PingRouter: PingContext

        activate PingRouter
        PingRouter -> Blacklist: PingContext\n(field grouping)
        deactivate PingRouter
        activate Blacklist

        Blacklist ->x Blacklist: update blacklist
        deactivate Blacklist
    end
    PeriodicResultManager -> FailReporter: PingContext\n(flowId grouping)
    note right of FailReporter: update flow status
    PeriodicResultManager -> StatsCoupler: PingContest\n(flowId grouping)

    activate StatsCoupler
    StatsCoupler -> StatsProducer: PingContext\n(flowId grouping)
    deactivate StatsCoupler

    activate StatsProducer
    StatsProducer -> kilda.stats: flow ping stats
    deactivate StatsProducer

    deactivate PeriodicResultManager

else timeout
    Time -> TimeoutManager: X monotonic tick
    Time -> TimeoutManager: X + N monotonic tick
    note right of TimeoutManager: log error
    TimeoutManager -> ResultDispatcher: PingContext
    deactivate TimeoutManager
    activate ResultDispatcher
    ResultDispatcher -> PeriodicResultManager: PingContext
    deactivate ResultDispatcher
    activate PeriodicResultManager

    PeriodicResultManager -> FailReporter: PingContext\n(field grouping)
    deactivate PeriodicResultManager
    activate FailReporter

    note right of FailReporter: set fail flag

    Time -> FailReporter: X monotonic tick
    Time -> FailReporter: X + M monotonic tick

    FailReporter -> kilda.flow.status: report flow failure

    deactivate FailReporter
end
deactivate TimeoutManager

@enduml
